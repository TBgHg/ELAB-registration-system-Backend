// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ELAB-registration-system-Backend/internal/model"
)

func newApplication(db *gorm.DB, opts ...gen.DOOption) application {
	_application := application{}

	_application.applicationDo.UseDB(db, opts...)
	_application.applicationDo.UseModel(&model.Application{})

	tableName := _application.applicationDo.TableName()
	_application.ALL = field.NewAsterisk(tableName)
	_application.ID = field.NewInt32(tableName, "id")
	_application.UserID = field.NewInt32(tableName, "user_id")
	_application.CreateTime = field.NewTime(tableName, "create_time")
	_application.InterviewID = field.NewInt32(tableName, "interview_id")
	_application.State = field.NewInt32(tableName, "state")
	_application.InterviewRes = field.NewInt32(tableName, "interview_res")
	_application.CreatedAt = field.NewTime(tableName, "created_at")
	_application.UpdatedAt = field.NewTime(tableName, "updated_at")

	_application.fillFieldMap()

	return _application
}

type application struct {
	applicationDo applicationDo

	ALL          field.Asterisk
	ID           field.Int32 // 主键
	UserID       field.Int32 // 用户ID
	CreateTime   field.Time  // 报名时间
	InterviewID  field.Int32 // 面试场次ID
	State        field.Int32 // 状态：0表示已取消，1表示正常状态
	InterviewRes field.Int32 // 面试结果：0表示评审中/未面试，-1表示未通过，1表示通过
	CreatedAt    field.Time  // 创建时间
	UpdatedAt    field.Time  // 最后修改时间

	fieldMap map[string]field.Expr
}

func (a application) Table(newTableName string) *application {
	a.applicationDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a application) As(alias string) *application {
	a.applicationDo.DO = *(a.applicationDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *application) updateTableName(table string) *application {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.UserID = field.NewInt32(table, "user_id")
	a.CreateTime = field.NewTime(table, "create_time")
	a.InterviewID = field.NewInt32(table, "interview_id")
	a.State = field.NewInt32(table, "state")
	a.InterviewRes = field.NewInt32(table, "interview_res")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *application) WithContext(ctx context.Context) *applicationDo {
	return a.applicationDo.WithContext(ctx)
}

func (a application) TableName() string { return a.applicationDo.TableName() }

func (a application) Alias() string { return a.applicationDo.Alias() }

func (a *application) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *application) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["id"] = a.ID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["interview_id"] = a.InterviewID
	a.fieldMap["state"] = a.State
	a.fieldMap["interview_res"] = a.InterviewRes
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a application) clone(db *gorm.DB) application {
	a.applicationDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a application) replaceDB(db *gorm.DB) application {
	a.applicationDo.ReplaceDB(db)
	return a
}

type applicationDo struct{ gen.DO }

func (a applicationDo) Debug() *applicationDo {
	return a.withDO(a.DO.Debug())
}

func (a applicationDo) WithContext(ctx context.Context) *applicationDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a applicationDo) ReadDB() *applicationDo {
	return a.Clauses(dbresolver.Read)
}

func (a applicationDo) WriteDB() *applicationDo {
	return a.Clauses(dbresolver.Write)
}

func (a applicationDo) Session(config *gorm.Session) *applicationDo {
	return a.withDO(a.DO.Session(config))
}

func (a applicationDo) Clauses(conds ...clause.Expression) *applicationDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a applicationDo) Returning(value interface{}, columns ...string) *applicationDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a applicationDo) Not(conds ...gen.Condition) *applicationDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a applicationDo) Or(conds ...gen.Condition) *applicationDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a applicationDo) Select(conds ...field.Expr) *applicationDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a applicationDo) Where(conds ...gen.Condition) *applicationDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a applicationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *applicationDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a applicationDo) Order(conds ...field.Expr) *applicationDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a applicationDo) Distinct(cols ...field.Expr) *applicationDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a applicationDo) Omit(cols ...field.Expr) *applicationDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a applicationDo) Join(table schema.Tabler, on ...field.Expr) *applicationDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a applicationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *applicationDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a applicationDo) RightJoin(table schema.Tabler, on ...field.Expr) *applicationDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a applicationDo) Group(cols ...field.Expr) *applicationDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a applicationDo) Having(conds ...gen.Condition) *applicationDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a applicationDo) Limit(limit int) *applicationDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a applicationDo) Offset(offset int) *applicationDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a applicationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *applicationDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a applicationDo) Unscoped() *applicationDo {
	return a.withDO(a.DO.Unscoped())
}

func (a applicationDo) Create(values ...*model.Application) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a applicationDo) CreateInBatches(values []*model.Application, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a applicationDo) Save(values ...*model.Application) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a applicationDo) First() (*model.Application, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Application), nil
	}
}

func (a applicationDo) Take() (*model.Application, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Application), nil
	}
}

func (a applicationDo) Last() (*model.Application, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Application), nil
	}
}

func (a applicationDo) Find() ([]*model.Application, error) {
	result, err := a.DO.Find()
	return result.([]*model.Application), err
}

func (a applicationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Application, err error) {
	buf := make([]*model.Application, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a applicationDo) FindInBatches(result *[]*model.Application, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a applicationDo) Attrs(attrs ...field.AssignExpr) *applicationDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a applicationDo) Assign(attrs ...field.AssignExpr) *applicationDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a applicationDo) Joins(fields ...field.RelationField) *applicationDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a applicationDo) Preload(fields ...field.RelationField) *applicationDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a applicationDo) FirstOrInit() (*model.Application, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Application), nil
	}
}

func (a applicationDo) FirstOrCreate() (*model.Application, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Application), nil
	}
}

func (a applicationDo) FindByPage(offset int, limit int) (result []*model.Application, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a applicationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a applicationDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a applicationDo) Delete(models ...*model.Application) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *applicationDo) withDO(do gen.Dao) *applicationDo {
	a.DO = *do.(*gen.DO)
	return a
}
